// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id     @default(uuid())
  email         String        @unique
  password      String
  role          Role
  leaderboard   Leaderboard[]

}

enum Role {
  User
  Admin
}

model Contest {
  id                             String        @id     @default(uuid())
  title                          String
  startTime                      DateTime
  contestToChallengeMapping      ContestToChallengeMapping[]
  leaderboard                    Leaderboard[]

}

// many to many b/w contests and challenges

model ContestToChallengeMapping {
  id            String        @id     @default(uuid())
  contestId     String
  challengeId   String
  index         Int
  submission    Submission[]
  contest       Contest       @relation(fields: [contestId], references: [id])
  challenge     Challenge     @relation(fields: [challengeId], references: [id])
  @@unique([contestId, challengeId])

}

model Challenge {
  id                            String        @id     @default(uuid())
  title                         String
  notionDocId                   String
  contestId                     String
  maxPoints                     Int
  contestToChallengeMapping     ContestToChallengeMapping[]

}

model Submission {
  id                              String                      @id     @default(uuid())
  contestToChallengeMappingId     String
  points                          Int
  contestToChallengeMapping       ContestToChallengeMapping   @relation(fields: [contestToChallengeMappingId], references: [id])
  createdAt                       DateTime                    @default(now())
}

model Leaderboard {
  id            String        @id     @default(uuid())
  contestId     String
  userId        String
  rank          Int
  contest       Contest       @relation(fields: [contestId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@unique([contestId, rank])
}